name: Release Builds

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install macOS build dependencies
        if: runner.os == 'macOS'
        run: |
          # Install only if not already present
          brew list libtiff &>/dev/null || brew install libtiff
          brew list libjpeg &>/dev/null || brew install libjpeg
          brew list webp &>/dev/null || brew install webp
          brew list little-cms2 &>/dev/null || brew install little-cms2
          brew list openssl@1.1 &>/dev/null || brew install openssl@1.1
          
          # Set environment variables
          export LDFLAGS="-L$(brew --prefix openssl@1.1)/lib"
          export CPPFLAGS="-I$(brew --prefix openssl@1.1)/include"

      - name: Build macOS universal binary
        if: runner.os == 'macOS'
        run: |
          # Create separate build environments
          python -m venv arm64_env
          source arm64_env/bin/activate
          pip install numpy pillow pyinstaller -r requirements.txt
          python -m PyInstaller \
            --onefile \
            --name=rifle_spread_analysis_arm \
            --target-arch arm64 \
            --distpath arm64_dist \
            --workpath arm64_build \
            main.py
          deactivate
          
          python -m venv x86_env
          source x86_env/bin/activate
          arch -x86_64 pip install numpy pillow pyinstaller -r requirements.txt
          arch -x86_64 python -m PyInstaller \
            --onefile \
            --name=rifle_spread_analysis_x86 \
            --target-arch x86_64 \
            --distpath x86_dist \
            --workpath x86_build \
            main.py
          deactivate
          
          # Create universal binary using lipo
          mkdir -p release
          lipo -create \
            -output release/rifle_spread_analysis-macos-universal \
            arm64_dist/rifle_spread_analysis_arm \
            x86_dist/rifle_spread_analysis_x86
          
          # Create architecture-specific copies
          cp arm64_dist/rifle_spread_analysis_arm release/rifle_spread_analysis-macos-arm64
          cp x86_dist/rifle_spread_analysis_x86 release/rifle_spread_analysis-macos-x86_64
          
          # Make executable
          chmod +x release/rifle_spread_analysis-macos-*

      - name: Build Windows executable
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller -r requirements.txt
          pyinstaller --onefile --name=rifle_spread_analysis main.py
          mkdir -p release
          Move-Item dist/rifle_spread_analysis.exe release/rifle_spread_analysis-windows-x86_64.exe

      - name: Build Linux executable
        if: runner.os == 'Linux'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller -r requirements.txt
          pyinstaller --onefile --name=rifle_spread_analysis main.py
          mkdir -p release
          mv dist/rifle_spread_analysis release/rifle_spread_analysis-linux-x86_64

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: release/

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine artifacts
        run: |
          mkdir -p combined-release
          find artifacts -name "rifle_spread_analysis*" -exec cp {} combined-release/ \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: combined-release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
