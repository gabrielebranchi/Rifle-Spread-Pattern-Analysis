name: Release Builds

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=v${VERSION}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install macOS build dependencies
        if: runner.os == 'macOS'
        run: |
          brew install libtiff libjpeg webp little-cms2 openssl@1.1 2>/dev/null || true
          export LDFLAGS="-L$(brew --prefix openssl@1.1)/lib"
          export CPPFLAGS="-I$(brew --prefix openssl@1.1)/include"

      - name: Build macOS universal binary
        if: runner.os == 'macOS'
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          mkdir -p release/v${VERSION}
          
          # ARM64 build
          python -m venv arm64_env
          source arm64_env/bin/activate
          pip install numpy pillow pyinstaller -r requirements.txt
          python -m PyInstaller --onefile --name=RSPA --distpath=arm64_dist main.py
          deactivate
          
          # x86_64 build
          python -m venv x86_env
          source x86_env/bin/activate
          arch -x86_64 pip install numpy pillow pyinstaller -r requirements.txt
          arch -x86_64 python -m PyInstaller --onefile --name=RSPA --distpath=x86_dist main.py
          deactivate
          
          # Combine binaries
          lipo -create -output release/v${VERSION}/RSPA-${VERSION}-macos-universal arm64_dist/RSPA x86_dist/RSPA
          cp arm64_dist/RSPA release/v${VERSION}/RSPA-${VERSION}-macos-arm64
          cp x86_dist/RSPA release/v${VERSION}/RSPA-${VERSION}-macos-x86_64
          chmod +x release/v${VERSION}/RSPA-${VERSION}-macos-*

      - name: Build Windows executable
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VERSION = "${{ steps.version.outputs.VERSION }}"
          python -m pip install --upgrade pip
          pip install pyinstaller -r requirements.txt
          pyinstaller --onefile --name=RSPA main.py
          New-Item -ItemType Directory -Path "release/v$VERSION" -Force
          Move-Item dist/RSPA.exe "release/v$VERSION/RSPA-$VERSION-windows-x86_64.exe"

      - name: Build Linux executable
        if: runner.os == 'Linux'
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          python -m pip install --upgrade pip
          pip install pyinstaller -r requirements.txt
          pyinstaller --onefile --name=RSPA main.py
          mkdir -p release/v${VERSION}
          mv dist/RSPA release/v${VERSION}/RSPA-${VERSION}-linux-x86_64

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: release/

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine artifacts
        run: |
          VERSION=${{ needs.build.outputs.VERSION }}
          mkdir -p release/v${VERSION}
          find artifacts -name "RSPA-*" -exec cp {} release/v${VERSION}/ \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.VERSION }}
          files: release/v${{ needs.build.outputs.VERSION }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
