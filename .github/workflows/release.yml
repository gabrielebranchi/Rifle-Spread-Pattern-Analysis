name: Build and Release Assets

on:
  push:
    tags:
      - 'v*'  # Pattern to match version tags like v1.0.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            artifact_name: macx-arm64-Release.dmg
            build_script: ./scripts/build-mac-arm64.sh
            artifact_path: ./build/Spread_Pattern_Analysis-*-macx-arm64-Release.dmg
          - os: macos-latest
            artifact_name: macx-x86_64-Release.dmg
            build_script: ./scripts/build-mac-x86.sh
            artifact_path: ./build/Spread_Pattern_Analysis-*-macx-x86_64-Release.dmg
          - os: windows-latest
            artifact_name: win64-Release.exe
            build_script: ./scripts/build-windows.ps1
            artifact_path: ./build/Spread_Pattern_Analysis-*-win64-Release.exe
          - os: ubuntu-latest
            artifact_name: x86_64-Release.AppImage
            build_script: ./scripts/build-linux.sh
            artifact_path: ./build/Spread_Pattern_Analysis-*-x86_64-Release.AppImage

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          echo "Setting up ${{ runner.os }} environment..."
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y build-essential libgl1-mesa-dev
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew update
            brew install cmake
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          fi

      - name: Make scripts executable
        if: runner.os != 'Windows'
        run: chmod +x ${{ matrix.build_script }}

      - name: Run build script
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            pwsh -Command "& '${{ matrix.build_script }}'"
          else
            ${{ matrix.build_script }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Spread_Pattern_Analysis-v${{ github.ref_name }}-${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          if-no-files-found: error

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Automated release containing:
            - macOS (ARM64) DMG
            - macOS (x86_64) DMG
            - Windows EXE
            - Linux AppImage
          files: |
            artifacts/Spread_Pattern_Analysis-v${{ github.ref_name }}-*.dmg
            artifacts/Spread_Pattern_Analysis-v${{ github.ref_name }}-*.exe
            artifacts/Spread_Pattern_Analysis-v${{ github.ref_name }}-*.AppImage
          draft: false
          prerelease: false
